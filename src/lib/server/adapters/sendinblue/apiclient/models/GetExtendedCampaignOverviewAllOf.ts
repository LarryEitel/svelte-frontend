/* tslint:disable */
/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GetExtendedCampaignOverviewAllOfSender } from './GetExtendedCampaignOverviewAllOfSender';
import {
	GetExtendedCampaignOverviewAllOfSenderFromJSON,
	GetExtendedCampaignOverviewAllOfSenderFromJSONTyped,
	GetExtendedCampaignOverviewAllOfSenderToJSON
} from './GetExtendedCampaignOverviewAllOfSender';

/**
 *
 * @export
 * @interface GetExtendedCampaignOverviewAllOf
 */
export interface GetExtendedCampaignOverviewAllOf {
	/**
	 * Retrieved the status of test email sending. (true=Test email has been sent  false=Test email has not been sent)
	 * @type {boolean}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	testSent: boolean;
	/**
	 * Header of the campaign
	 * @type {string}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	header: string;
	/**
	 * Footer of the campaign
	 * @type {string}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	footer: string;
	/**
	 *
	 * @type {GetExtendedCampaignOverviewAllOfSender}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	sender: GetExtendedCampaignOverviewAllOfSender;
	/**
	 * Email defined as the "Reply to" of the campaign
	 * @type {string}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	replyTo: string;
	/**
	 * Customisation of the "to" field of the campaign
	 * @type {string}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	toField: string;
	/**
	 * HTML content of the campaign
	 * @type {string}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	htmlContent: string;
	/**
	 * Link to share the campaign on social medias
	 * @type {string}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	shareLink?: string;
	/**
	 * Tag of the campaign
	 * @type {string}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	tag: string;
	/**
	 * Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
	 * @type {Date}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	createdAt: Date;
	/**
	 * UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
	 * @type {Date}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	modifiedAt: Date;
	/**
	 * Status of inline image. inlineImageActivation = false means image canâ€™t be embedded, & inlineImageActivation = true means image can be embedded, in the email.
	 * @type {boolean}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	inlineImageActivation?: boolean;
	/**
	 * Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
	 * @type {boolean}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	mirrorActive?: boolean;
	/**
	 * FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
	 * @type {boolean}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	recurring?: boolean;
	/**
	 * Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if 'status' of the campaign is 'sent'
	 * @type {Date}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	sentDate?: Date;
	/**
	 * Total number of non-delivered campaigns for a particular campaign id.
	 * @type {number}
	 * @memberof GetExtendedCampaignOverviewAllOf
	 */
	returnBounce?: number;
}

/**
 * Check if a given object implements the GetExtendedCampaignOverviewAllOf interface.
 */
export function instanceOfGetExtendedCampaignOverviewAllOf(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && 'testSent' in value;
	isInstance = isInstance && 'header' in value;
	isInstance = isInstance && 'footer' in value;
	isInstance = isInstance && 'sender' in value;
	isInstance = isInstance && 'replyTo' in value;
	isInstance = isInstance && 'toField' in value;
	isInstance = isInstance && 'htmlContent' in value;
	isInstance = isInstance && 'tag' in value;
	isInstance = isInstance && 'createdAt' in value;
	isInstance = isInstance && 'modifiedAt' in value;

	return isInstance;
}

export function GetExtendedCampaignOverviewAllOfFromJSON(
	json: any
): GetExtendedCampaignOverviewAllOf {
	return GetExtendedCampaignOverviewAllOfFromJSONTyped(json, false);
}

export function GetExtendedCampaignOverviewAllOfFromJSONTyped(
	json: any,
	ignoreDiscriminator: boolean
): GetExtendedCampaignOverviewAllOf {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		testSent: json['testSent'],
		header: json['header'],
		footer: json['footer'],
		sender: GetExtendedCampaignOverviewAllOfSenderFromJSON(json['sender']),
		replyTo: json['replyTo'],
		toField: json['toField'],
		htmlContent: json['htmlContent'],
		shareLink: !exists(json, 'shareLink') ? undefined : json['shareLink'],
		tag: json['tag'],
		createdAt: new Date(json['createdAt']),
		modifiedAt: new Date(json['modifiedAt']),
		inlineImageActivation: !exists(json, 'inlineImageActivation')
			? undefined
			: json['inlineImageActivation'],
		mirrorActive: !exists(json, 'mirrorActive') ? undefined : json['mirrorActive'],
		recurring: !exists(json, 'recurring') ? undefined : json['recurring'],
		sentDate: !exists(json, 'sentDate') ? undefined : new Date(json['sentDate']),
		returnBounce: !exists(json, 'returnBounce') ? undefined : json['returnBounce']
	};
}

export function GetExtendedCampaignOverviewAllOfToJSON(
	value?: GetExtendedCampaignOverviewAllOf | null
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		testSent: value.testSent,
		header: value.header,
		footer: value.footer,
		sender: GetExtendedCampaignOverviewAllOfSenderToJSON(value.sender),
		replyTo: value.replyTo,
		toField: value.toField,
		htmlContent: value.htmlContent,
		shareLink: value.shareLink,
		tag: value.tag,
		createdAt: value.createdAt.toISOString(),
		modifiedAt: value.modifiedAt.toISOString(),
		inlineImageActivation: value.inlineImageActivation,
		mirrorActive: value.mirrorActive,
		recurring: value.recurring,
		sentDate: value.sentDate === undefined ? undefined : value.sentDate.toISOString(),
		returnBounce: value.returnBounce
	};
}
